#!/usr/bin/env fish
# === wireshark.fish ===
# Purpose: Install Wireshark network protocol analyzer on CachyOS
# Installs Wireshark from official repositories
# Author: theoneandonlywoj

echo "üöÄ Starting Wireshark installation..."

# === 1. Check if Wireshark is already installed ===
command -q wireshark; and set -l wireshark_installed "installed"
command -q tshark; and set -l tshark_installed "installed"

if test -n "$wireshark_installed" -o -n "$tshark_installed"
    echo "‚úÖ Wireshark is already installed."
    if test -n "$wireshark_installed"
        wireshark --version 2>&1 | head -n 1
    end
    if test -n "$tshark_installed"
        tshark --version 2>&1 | head -n 1
    end
    read -P "Do you want to reinstall? [y/N] " reinstall
    if test "$reinstall" != "y" -a "$reinstall" != "Y"
        echo "‚ö† Skipping Wireshark installation."
        exit 0
    end
    echo "üì¶ Removing existing Wireshark installation..."
    sudo pacman -R --noconfirm wireshark-qt wireshark-cli 2>/dev/null
    if test $status -ne 0
        echo "‚ö† Some packages may not have been removed, continuing..."
    end
    echo "‚úÖ Wireshark removed."
end

# === 2. Choose installation type ===
echo "üìå Choose Wireshark installation:"
echo "   1) Wireshark CLI only (tshark, command-line tools)"
echo "   2) Wireshark with GUI (Full version with Qt interface)"
read -P "Select [1/2]: " install_choice

if test "$install_choice" = "1"
    set PACKAGES "wireshark-cli"
    set INSTALL_TYPE "CLI only"
else if test "$install_choice" = "2"
    set PACKAGES "wireshark-qt wireshark-cli"
    set INSTALL_TYPE "Full version with GUI"
else
    echo "‚ùå Invalid choice. Defaulting to full installation."
    set PACKAGES "wireshark-qt wireshark-cli"
    set INSTALL_TYPE "Full version with GUI"
end

echo "üìå Selected: Wireshark $INSTALL_TYPE"

# === 3. Install Wireshark ===
echo "üì¶ Installing Wireshark ($INSTALL_TYPE)..."
if test "$install_choice" = "1"
    sudo pacman -S --needed --noconfirm wireshark-cli
else
    sudo pacman -S --needed --noconfirm wireshark-qt wireshark-cli
end

if test $status -ne 0
    echo "‚ùå Failed to install Wireshark."
    exit 1
end
echo "‚úÖ Wireshark installed."

# === 4. Setup Wireshark for non-root usage ===
echo "‚öôÔ∏è Configuring Wireshark for non-root usage..."
echo "üí° Wireshark typically requires root privileges to capture packets."
echo "üí° To run Wireshark without root, you can:"
echo "   - Add your user to the wireshark group: sudo usermod -aG wireshark $USER"
echo "   - Or run with sudo when needed"
read -P "Do you want to add your user to the wireshark group? [y/N] " add_group

if test "$add_group" = "y" -o "$add_group" = "Y"
    echo "üì¶ Adding $USER to wireshark group..."
    sudo usermod -aG wireshark $USER
    if test $status -eq 0
        echo "‚úÖ User added to wireshark group."
        echo "‚ö†Ô∏è You need to log out and log back in (or run 'newgrp wireshark') for the changes to take effect."
    else
        echo "‚ö† Failed to add user to wireshark group."
    end
end

# === 5. Check and fix snapper Boost library issue (if present) ===
if test -f /usr/bin/snapper
    echo
    echo "üîß Checking for snapper Boost library issue..."
    snapper --version > /dev/null 2>&1
    if test $status -ne 0
        echo "‚ö† Detected snapper Boost library version mismatch."
        echo "üí° This can happen after Boost updates."
        read -P "Do you want to fix snapper? [y/N] " fix_snapper
        
        if test "$fix_snapper" = "y" -o "$fix_snapper" = "Y"
            echo "üì¶ Reinstalling snapper to fix Boost library version mismatch..."
            sudo pacman -S --noconfirm snapper
            if test $status -eq 0
                echo "‚úÖ Snapper fixed successfully."
            else
                echo "‚ö† Failed to fix snapper, but Wireshark is still fully functional."
            end
        end
    else
        echo "‚úÖ Snapper is working correctly."
    end
end

# === 6. Verify installation ===
echo
echo "üß™ Verifying installation..."
set verification_passed true

if command -q tshark
    echo "‚úÖ tshark CLI installed successfully"
    tshark --version 2>&1 | head -n 1
else
    echo "‚ùå tshark installation verification failed."
    set verification_passed false
end

if test -n "$wireshark_installed" -o "$install_choice" = "2"
    if command -q wireshark
        echo "‚úÖ Wireshark GUI installed successfully"
        wireshark --version 2>&1 | head -n 1
    else
        echo "‚ùå Wireshark GUI installation verification failed."
        set verification_passed false
    end
end

if test "$verification_passed" = "false"
    echo "‚ö†Ô∏è Some components failed verification."
end

echo
echo "‚úÖ Wireshark installation complete!"
echo "üí° Wireshark is a network protocol analyzer for:"
echo "   - Capturing and analyzing network traffic"
echo "   - Troubleshooting network problems"
echo "   - Network security analysis"
echo "   - Protocol development and learning"
echo ""
echo "üí° Basic Wireshark commands:"
echo "   - tshark -i interface: Capture packets from interface"
echo "   - tshark -r file: Read and analyze saved capture file"
echo "   - tshark -i any: Capture from all interfaces"
echo "   - wireshark: Launch GUI (if installed)"
echo ""
echo "üí° Common tshark usage:"
echo "   - Capture packets: tshark -i wlan0"
echo "   - Save to file: tshark -i wlan0 -w capture.pcap"
echo "   - Filter packets: tshark -i wlan0 -f 'port 80'"
echo "   - Display packets: tshark -i wlan0 -x"
echo "   - Count packets: tshark -i wlan0 -c 100"
echo ""
echo "üí° Useful tshark filters:"
echo "   - http: HTTP traffic only"
echo "   - tcp port 80: TCP traffic on port 80"
echo "   - host 192.168.1.1: Traffic to/from specific host"
echo "   - icmp: ICMP traffic only"
echo "   - tcp and port 443: HTTPS traffic"
echo ""
echo "üí° Security and permissions:"
echo "   - Normal packet capture requires elevated privileges"
echo "   - Or add user to wireshark group (done above if you chose yes)"
echo "   - For basic pcap reading: tshark -r file.pcap"
echo ""
echo "üí° GUI usage (if installed):"
echo "   - wireshark: Launch GUI interface"
echo "   - wireshark file.pcap: Open saved capture"
echo "   - Use filter bar for live filtering"
echo "   - Right-click packets for detailed analysis"
echo ""
echo "üí° Tips:"
echo "   - Use color rules to highlight interesting packets"
echo "   - Export specific packets or conversations"
echo "   - Use statistics for protocol distribution"
echo "   - Follow TCP streams for HTTP analysis"
echo ""
echo "üí° Example workflows:"
echo "   1. Capture HTTP traffic: tshark -i any -f 'port 80' -w http_capture.pcap"
echo "   2. Analyze saved file: tshark -r http_capture.pcap"
echo "   3. Get packet count: tshark -r http_capture.pcap | wc -l"
echo "   4. Extract DNS queries: tshark -r http_capture.pcap 'dns'"
echo ""

